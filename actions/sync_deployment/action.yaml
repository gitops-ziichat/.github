# https://docs.github.com/en/rest/deployments/statuses?apiVersion=2022-11-28#create-a-deployment-status

name: Update Deployment Status
description: Looks up the latest deployment for a ref and updates its status

inputs:
  ref:
    description: The name of the ref. This can be a branch, tag, or SHA.
    required: true
  state:
    description: The state of the status. When you set a transient deployment to inactive, the deployment will be shown as destroyed in GitHub.
    required: true
  environment:
    description: Name for the target deployment environment, which can be changed when setting a deploy status.
  environment_url:
    description: Sets the URL for accessing your environment.
  log_url:
    description: This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment.

runs:
  using: composite
  steps:
    - id: query
      uses: actions/github-script@v7
      env:
        INPUT_REF: ${{ inputs.ref }}
        INPUT_STATE: ${{ inputs.state }}
        INPUT_ENVIRONMENT: ${{ inputs.environment }}
        INPUT_ENVIRONMENT_URL: ${{ inputs.environment_url }}
        INPUT_LOG_URL: ${{ inputs.log_url }}
      with:
        script: |
          console.log(`Querying latest deployment for ref: ${core.getInput('ref')}`);

          const response = await github.rest.repos.listDeployments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: core.getInput('ref'),
          });

          if (!response.data.length) {
            core.setFailed(`  No deployments found for ref: ${core.getInput('ref')}`);
            return;
          }

          console.log(`  Found ${response.data.length} deployments`);
          console.log(`  Updating deployment status...`);

          let state = core.getInput('state');
          for (const deployment of response.data) {
            const resp = await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id,
              state: state,
              environment: core.getInput('environment'),
              environment_url: core.getInput('environment_url'),
              // log_url: core.getInput('log_url'),
              description: "Deployment status updated via repository_dispatch",
            });

            console.log(resp)

            // Set all previous preview deployments to inactive
            if (core.getInput('environment') != 'preview') break;
            state = 'inactive';
          }

          console.log(`  Deployment(s) status(es) updated to ${state}!`);
