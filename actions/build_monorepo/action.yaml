name: Build Monorepo Image
description: Build and push a Docker image to ghcr.io

inputs:
  registry:
    description: The Docker registry to push the image to
    required: false
    default: ghcr.io

  image_name:
    description: The name of the Docker image
    required: false
    default: ${{ github.repository }}

  dockerfile:
    description: Path to Dockerfile
    required: false
    default: Dockerfile

  context:
    description: Build context directory
    required: false
    default: .dh-build

  version:
    description: The semantic version to be used for tagging
    required: true

runs:
  using: composite
  steps:
    - name: Extract metadata for the Docker image
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.registry }}/${{ inputs.image_name }}
        tags: |
          # Semver for main (release)
          type=semver,pattern={{version}},enable=${{ github.ref_name == 'main' }}

          # Beta for develop
          type=raw,value=${{ inputs.version }}-beta,enable=${{ github.ref_name == 'develop' }}

          # Alpha for feature branches
          type=raw,value=${{ inputs.version }}-alpha,enable=${{ !contains(fromJson('["main","develop"]'), github.ref_name) }}

          # Always push sha tag
          type=sha,priority=1000,prefix=,suffix=,format=long

          # Pull request tag
          type=ref,event=pr,enable=${{ github.event_name == 'pull_request' }}

          # Optional: latest tag only on main
          type=raw,value=latest,enable=${{ github.ref_name == 'main' }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Build and push
      id: push
      uses: docker/build-push-action@v6
      with:
        push: true
        file: ${{ inputs.dockerfile }}
        context: ${{ inputs.context }}
        platforms: linux/amd64,linux/arm64
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
